package com.greycodes.anemiadetector;

import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Paint;
import android.net.Uri;
import android.provider.MediaStore;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;


public class MainActivity extends ActionBarActivity {
    Button newPatient,oldPatient;
    private static int RESULT_LOAD_IMG = 1;
    String imgDecodableString;
    ImageView imgView;
    Button button;
    final String TAG = "Anemia";
    static {
        if (!OpenCVLoader.initDebug()) {
            // Handle initialization error
        }
    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.home_layout);
        newPatient = (Button) findViewById(R.id.addnew);
        oldPatient = (Button) findViewById(R.id.checkold);

        newPatient.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this,PatientActivitty.class));

            }
        });
        oldPatient.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this,NewPatientActivity.class));

            }
        });
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
/*

    public Bitmap circle(Bitmap bitmap){

        Bitmap imageBmp=bitmap; //= BitmapFactory.decodeResource(MainActivityPDF.this.getResources(),R.drawable.loadingplashscreen);

        Mat imgSource = new Mat(), imgCirclesOut = new Mat();

        Utils.bitmapToMat(imageBmp , imgSource);

        //grey opencv
        Imgproc.cvtColor(imgSource, imgSource, Imgproc.COLOR_BGR2GRAY);

        Imgproc.GaussianBlur( imgSource, imgSource, new Size(9, 9), 2, 2 );
        Imgproc.HoughCircles( imgSource, imgCirclesOut, Imgproc.CV_HOUGH_GRADIENT, 1, imgSource.rows()/8, 200, 100, 0, 0 );

        float circle[] = new float[3];

        for (int i = 0; i < imgCirclesOut.cols(); i++)
        {
            imgCirclesOut.get(0, i, circle);
            org.opencv.core.Point center = new org.opencv.core.Point();
            center.x = circle[0];
            center.y = circle[1];
            Core.circle(imgSource, center, (int) circle[2], new Scalar(255, 0, 0, 255), 4);
        }
        // Toast.makeText(getApplicationContext(),"Number"+i,Toast.LENGTH_LONG).show();
        final Bitmap bmp = Bitmap.createBitmap(imageBmp.getWidth(), imageBmp.getHeight(), Bitmap.Config.ARGB_8888);

        Utils.matToBitmap(imgSource, bmp);


        //ImageView frame = (ImageView) findViewById(R.id.imageView1);

        //Bitmap bmp = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
        // frame.setImageBitmap(bmp);

        return  bmp;
    }

    public Bitmap toGrayscale(Bitmap bmpOriginal)
    {
        int width, height;
        height = bmpOriginal.getHeight();
        width = bmpOriginal.getWidth();

        Bitmap bmpGrayscale = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
        Canvas c = new Canvas(bmpGrayscale);
        Paint paint = new Paint();
        ColorMatrix cm = new ColorMatrix();
        cm.setSaturation(0);
        ColorMatrixColorFilter f = new ColorMatrixColorFilter(cm);
        paint.setColorFilter(f);
        c.drawBitmap(bmpOriginal, 0, 0, paint);
        return bmpGrayscale;
    }

    public static Bitmap GrayscaleToBin(Bitmap bm2) {
        Bitmap bm;
        bm = bm2.copy(Bitmap.Config.RGB_565, true);
        final int width = bm.getWidth();
        final int height = bm.getHeight();

        int pixel1, pixel2, pixel3, pixel4, A, R;
        int[] pixels;
        pixels = new int[width * height];
        bm.getPixels(pixels, 0, width, 0, 0, width, height);
        int size = width * height;
        int s = width / 8;
        int s2 = s >> 1;
        double t = 0.15;
        double it = 1.0 - t;
        int[] integral = new int[size];
        int[] threshold = new int[size];
        int i, j, diff, x1, y1, x2, y2, ind1, ind2, ind3;
        int sum = 0;
        int ind = 0;
        while (ind < size) {
            sum += pixels[ind] & 0xFF;
            integral[ind] = sum;
            ind += width;
        }
        x1 = 0;
        for (i = 1; i < width; ++i) {
            sum = 0;
            ind = i;
            ind3 = ind - s2;
            if (i > s) {
                x1 = i - s;
            }
            diff = i - x1;
            for (j = 0; j < height; ++j) {
                sum += pixels[ind] & 0xFF;
                integral[ind] = integral[(int) (ind - 1)] + sum;
                ind += width;
                if (i < s2) continue;
                if (j < s2) continue;
                y1 = (j < s ? 0 : j - s);
                ind1 = y1 * width;
                ind2 = j * width;

                if (((pixels[ind3] & 0xFF) * (diff * (j - y1))) < ((integral[(int) (ind2 + i)] - integral[(int) (ind1 + i)] - integral[(int) (ind2 + x1)] + integral[(int) (ind1 + x1)]) * it)) {
                    threshold[ind3] = 0x00;
                } else {
                    threshold[ind3] = 0xFFFFFF;
                }
                ind3 += width;
            }
        }

        y1 = 0;
        for (j = 0; j < height; ++j) {
            i = 0;
            y2 = height - 1;
            if (j < height - s2) {
                i = width - s2;
                y2 = j + s2;
            }

            ind = j * width + i;
            if (j > s2) y1 = j - s2;
            ind1 = y1 * width;
            ind2 = y2 * width;
            diff = y2 - y1;
            for (; i < width; ++i, ++ind) {

                x1 = (i < s2 ? 0 : i - s2);
                x2 = i + s2;

                // check the border
                if (x2 >= width) x2 = width - 1;

                if (((pixels[ind] & 0xFF) * ((x2 - x1) * diff)) < ((integral[(int) (ind2 + x2)] - integral[(int) (ind1 + x2)] - integral[(int) (ind2 + x1)] + integral[(int) (ind1 + x1)]) * it)) {
                    threshold[ind] = 0x00;
                } else {
                    threshold[ind] = 0xFFFFFF;
                }
            }
        }

        bm.setPixels(threshold, 0, width, 0, 0, width, height);

        return bm;
    }

*/
}
